/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * HeliTechnology Example Api
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type {
  GetAuthUser200,
  PostAuthLogin200,
  PostAuthLogin422,
  PostAuthLoginBody,
  PostAuthRefresh200,
  PostAuthRegister201,
  PostAuthRegister422,
  PostAuthRegisterBody,
} from '../../models';
import { BASE_INSTANCE } from '../../configs/instances/base_instance';

export const postAuthRegister = (
  postAuthRegisterBody: PostAuthRegisterBody
) => {
  return BASE_INSTANCE<PostAuthRegister201>({
    url: `/auth/register`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: postAuthRegisterBody,
  });
};

export const getPostAuthRegisterMutationOptions = <
  TError = PostAuthRegister422,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthRegister>>,
    TError,
    { data: PostAuthRegisterBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAuthRegister>>,
  TError,
  { data: PostAuthRegisterBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthRegister>>,
    { data: PostAuthRegisterBody }
  > = (props) => {
    const { data } = props ?? {};

    return postAuthRegister(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAuthRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthRegister>>
>;
export type PostAuthRegisterMutationBody = PostAuthRegisterBody;
export type PostAuthRegisterMutationError = PostAuthRegister422;

export const usePostAuthRegister = <
  TError = PostAuthRegister422,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthRegister>>,
    TError,
    { data: PostAuthRegisterBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postAuthRegister>>,
  TError,
  { data: PostAuthRegisterBody },
  TContext
> => {
  const mutationOptions = getPostAuthRegisterMutationOptions(options);

  return useMutation(mutationOptions);
};
export const postAuthLogin = (postAuthLoginBody: PostAuthLoginBody) => {
  return BASE_INSTANCE<PostAuthLogin200>({
    url: `/auth/login`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: postAuthLoginBody,
  });
};

export const getPostAuthLoginMutationOptions = <
  TError = void | PostAuthLogin422,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthLogin>>,
    TError,
    { data: PostAuthLoginBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAuthLogin>>,
  TError,
  { data: PostAuthLoginBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthLogin>>,
    { data: PostAuthLoginBody }
  > = (props) => {
    const { data } = props ?? {};

    return postAuthLogin(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAuthLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthLogin>>
>;
export type PostAuthLoginMutationBody = PostAuthLoginBody;
export type PostAuthLoginMutationError = void | PostAuthLogin422;

export const usePostAuthLogin = <
  TError = void | PostAuthLogin422,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthLogin>>,
    TError,
    { data: PostAuthLoginBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postAuthLogin>>,
  TError,
  { data: PostAuthLoginBody },
  TContext
> => {
  const mutationOptions = getPostAuthLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
export const postAuthRefresh = () => {
  return BASE_INSTANCE<PostAuthRefresh200>({
    url: `/auth/refresh`,
    method: 'POST',
  });
};

export const getPostAuthRefreshMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthRefresh>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAuthRefresh>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthRefresh>>,
    void
  > = () => {
    return postAuthRefresh();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAuthRefreshMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthRefresh>>
>;

export type PostAuthRefreshMutationError = void;

export const usePostAuthRefresh = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthRefresh>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postAuthRefresh>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostAuthRefreshMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getAuthUser = (signal?: AbortSignal) => {
  return BASE_INSTANCE<GetAuthUser200>({
    url: `/auth/user`,
    method: 'GET',
    signal,
  });
};

export const getGetAuthUserQueryKey = () => {
  return [`/auth/user`] as const;
};

export const getGetAuthUserQueryOptions = <
  TData = Awaited<ReturnType<typeof getAuthUser>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getAuthUser>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAuthUserQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthUser>>> = ({
    signal,
  }) => getAuthUser(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAuthUser>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAuthUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAuthUser>>
>;
export type GetAuthUserQueryError = void;

export const useGetAuthUser = <
  TData = Awaited<ReturnType<typeof getAuthUser>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getAuthUser>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAuthUserQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
