/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * HeliTechnology Example Api
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type {
  GetTasks200Item,
  PatchTasksId200,
  PatchTasksIdBody,
  PostTasks200,
  PostTasksBody,
} from '../../models';
import { BASE_INSTANCE } from '../../configs/instances/base_instance';

export const getTasks = (signal?: AbortSignal) => {
  return BASE_INSTANCE<GetTasks200Item[]>({
    url: `/tasks`,
    method: 'GET',
    signal,
  });
};

export const getGetTasksQueryKey = () => {
  return [`/tasks`] as const;
};

export const getGetTasksQueryOptions = <
  TData = Awaited<ReturnType<typeof getTasks>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTasks>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTasksQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTasks>>> = ({
    signal,
  }) => getTasks(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTasks>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetTasksQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTasks>>
>;
export type GetTasksQueryError = void;

export const useGetTasks = <
  TData = Awaited<ReturnType<typeof getTasks>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTasks>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTasksQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postTasks = (postTasksBody: PostTasksBody) => {
  return BASE_INSTANCE<PostTasks200>({
    url: `/tasks`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: postTasksBody,
  });
};

export const getPostTasksMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postTasks>>,
    TError,
    { data: PostTasksBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postTasks>>,
  TError,
  { data: PostTasksBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postTasks>>,
    { data: PostTasksBody }
  > = (props) => {
    const { data } = props ?? {};

    return postTasks(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostTasksMutationResult = NonNullable<
  Awaited<ReturnType<typeof postTasks>>
>;
export type PostTasksMutationBody = PostTasksBody;
export type PostTasksMutationError = unknown;

export const usePostTasks = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postTasks>>,
    TError,
    { data: PostTasksBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postTasks>>,
  TError,
  { data: PostTasksBody },
  TContext
> => {
  const mutationOptions = getPostTasksMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Update completed property of task
 */
export const patchTasksId = (
  id: string,
  patchTasksIdBody: PatchTasksIdBody
) => {
  return BASE_INSTANCE<PatchTasksId200>({
    url: `/tasks/${id}`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: patchTasksIdBody,
  });
};

export const getPatchTasksIdMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchTasksId>>,
    TError,
    { id: string; data: PatchTasksIdBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchTasksId>>,
  TError,
  { id: string; data: PatchTasksIdBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchTasksId>>,
    { id: string; data: PatchTasksIdBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return patchTasksId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchTasksIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchTasksId>>
>;
export type PatchTasksIdMutationBody = PatchTasksIdBody;
export type PatchTasksIdMutationError = void;

/**
 * @summary Update completed property of task
 */
export const usePatchTasksId = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchTasksId>>,
    TError,
    { id: string; data: PatchTasksIdBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchTasksId>>,
  TError,
  { id: string; data: PatchTasksIdBody },
  TContext
> => {
  const mutationOptions = getPatchTasksIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteTasksId = (id: string) => {
  return BASE_INSTANCE<void>({ url: `/tasks/${id}`, method: 'DELETE' });
};

export const getDeleteTasksIdMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTasksId>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTasksId>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTasksId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteTasksId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTasksIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTasksId>>
>;

export type DeleteTasksIdMutationError = void;

export const useDeleteTasksId = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTasksId>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteTasksId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteTasksIdMutationOptions(options);

  return useMutation(mutationOptions);
};
